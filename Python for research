1) Exercise 1-2

import string
alphabet = " " + string.ascii_lowercase

### Create a dictionary with keys consisting of the characters in alphabet ###
positions = {}

###  values consisting of the numbers from 0 to 26 and Store this as positions ###
index = 0
for char in alphabet:
  positions[char] = index
  index += 1
  
print(positions['n'])
14


2) Exercise 3

### Use positions to create an encoded message based on message where each character in message has been shifted forward by 1 position, 
as defined by positions. Note that you can ensure the result remains within 0-26 using result % 27. Store this as encoded_message. ###

message = "hi my name is caesar"
encoding_list = []
for char in message:
  position = positions[char]
  encoded_position = (position + 1) % 27
  encoding_list.append(alphabet[encoded_position])
encoded_message = "".join(encoding_list)

print(encoded_message)
ijanzaobnfajtadbftbs


3) Excercise 4

### Define a function that encodes a message with any given encryption key. ###
### Define a function encoding that takes a message as input as well as an int encryption key key to encode a message with the Caesar cipher 
    by shifting each letter in message by key positions. ###
### Your function should return a string consisting of these encoded letters. ###
### Use encoding to encode message using key = 3 and save the result as encoded_message. Print encoded_message. ###


def encoding(message, key = 0):
  encoding_list = []
  for char in message:
    position = position[char]
    encoded_position = (position + key) % 27
    encoding_list.append(alphabet[encoded_position])
  encoded_string = "".joint(encoding_list)
  return encoded_string
  
  encoded_message = encoding(message, 3)
  print(encoded_message)
  klcpacqdphclvcfdhvdu
  
  
  4) Excercise 4
  ### Decode the message ###
  decoded_message = encoding(encoded_message, -3)
  print(decoded_message)
  
  hi my name is caesar
  
